/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/scrape/route";
exports.ids = ["app/api/scrape/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fscrape%2Froute&page=%2Fapi%2Fscrape%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fscrape%2Froute.ts&appDir=%2Fhome%2Frunner%2Fworkspace%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frunner%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fscrape%2Froute&page=%2Fapi%2Fscrape%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fscrape%2Froute.ts&appDir=%2Fhome%2Frunner%2Fworkspace%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frunner%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_runner_workspace_src_app_api_scrape_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/scrape/route.ts */ \"(rsc)/./src/app/api/scrape/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/scrape/route\",\n        pathname: \"/api/scrape\",\n        filename: \"route\",\n        bundlePath: \"app/api/scrape/route\"\n    },\n    resolvedPagePath: \"/home/runner/workspace/src/app/api/scrape/route.ts\",\n    nextConfigOutput,\n    userland: _home_runner_workspace_src_app_api_scrape_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZzY3JhcGUlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnNjcmFwZSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnNjcmFwZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGcnVubmVyJTJGd29ya3NwYWNlJTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZob21lJTJGcnVubmVyJTJGd29ya3NwYWNlJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNFO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3NyYy9hcHAvYXBpL3NjcmFwZS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvc2NyYXBlL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvc2NyYXBlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9zY3JhcGUvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3NyYy9hcHAvYXBpL3NjcmFwZS9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fscrape%2Froute&page=%2Fapi%2Fscrape%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fscrape%2Froute.ts&appDir=%2Fhome%2Frunner%2Fworkspace%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frunner%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/scrape/route.ts":
/*!*************************************!*\
  !*** ./src/app/api/scrape/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_scraper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/scraper */ \"(rsc)/./src/lib/scraper.ts\");\n\n\nasync function POST() {\n    try {\n        console.log('Starting manual scraping process...');\n        const scraper = new _lib_scraper__WEBPACK_IMPORTED_MODULE_1__.VLRScraper();\n        const result = await scraper.scrapeAllMatches();\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: result.success,\n            data: result,\n            message: result.success ? `Successfully scraped ${result.matches_scraped} new matches and updated ${result.matches_updated} existing matches` : 'Scraping completed with errors'\n        });\n    } catch (error) {\n        console.error('Error during manual scraping:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Failed to complete scraping process',\n            message: String(error)\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET() {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        success: false,\n        error: 'Method not allowed. Use POST to trigger scraping.'\n    }, {\n        status: 405\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9zY3JhcGUvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQztBQUNBO0FBR3BDLGVBQWVFO0lBQ3BCLElBQUk7UUFDRkMsUUFBUUMsR0FBRyxDQUFDO1FBRVosTUFBTUMsVUFBVSxJQUFJSixvREFBVUE7UUFDOUIsTUFBTUssU0FBUyxNQUFNRCxRQUFRRSxnQkFBZ0I7UUFFN0MsT0FBT1AscURBQVlBLENBQUNRLElBQUksQ0FBQztZQUN2QkMsU0FBU0gsT0FBT0csT0FBTztZQUN2QkMsTUFBTUo7WUFDTkssU0FBU0wsT0FBT0csT0FBTyxHQUNuQixDQUFDLHFCQUFxQixFQUFFSCxPQUFPTSxlQUFlLENBQUMseUJBQXlCLEVBQUVOLE9BQU9PLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUNuSDtRQUNOO0lBRUYsRUFBRSxPQUFPQyxPQUFPO1FBQ2RYLFFBQVFXLEtBQUssQ0FBQyxpQ0FBaUNBO1FBRS9DLE9BQU9kLHFEQUFZQSxDQUFDUSxJQUFJLENBQUM7WUFDdkJDLFNBQVM7WUFDVEssT0FBTztZQUNQSCxTQUFTSSxPQUFPRDtRQUNsQixHQUF3QjtZQUFFRSxRQUFRO1FBQUk7SUFDeEM7QUFDRjtBQUVPLGVBQWVDO0lBQ3BCLE9BQU9qQixxREFBWUEsQ0FBQ1EsSUFBSSxDQUFDO1FBQ3ZCQyxTQUFTO1FBQ1RLLE9BQU87SUFDVCxHQUFHO1FBQUVFLFFBQVE7SUFBSTtBQUNuQiIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zcmMvYXBwL2FwaS9zY3JhcGUvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgVkxSU2NyYXBlciB9IGZyb20gJ0AvbGliL3NjcmFwZXInO1xuaW1wb3J0IHsgQXBpUmVzcG9uc2UsIFNjcmFwZVJlc3BvbnNlIH0gZnJvbSAnQC90eXBlcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKCkge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdTdGFydGluZyBtYW51YWwgc2NyYXBpbmcgcHJvY2Vzcy4uLicpO1xuICAgIFxuICAgIGNvbnN0IHNjcmFwZXIgPSBuZXcgVkxSU2NyYXBlcigpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjcmFwZXIuc2NyYXBlQWxsTWF0Y2hlcygpO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHJlc3VsdC5zdWNjZXNzLFxuICAgICAgZGF0YTogcmVzdWx0LFxuICAgICAgbWVzc2FnZTogcmVzdWx0LnN1Y2Nlc3MgXG4gICAgICAgID8gYFN1Y2Nlc3NmdWxseSBzY3JhcGVkICR7cmVzdWx0Lm1hdGNoZXNfc2NyYXBlZH0gbmV3IG1hdGNoZXMgYW5kIHVwZGF0ZWQgJHtyZXN1bHQubWF0Y2hlc191cGRhdGVkfSBleGlzdGluZyBtYXRjaGVzYFxuICAgICAgICA6ICdTY3JhcGluZyBjb21wbGV0ZWQgd2l0aCBlcnJvcnMnXG4gICAgfSBhcyBBcGlSZXNwb25zZTxTY3JhcGVSZXNwb25zZT4pO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIG1hbnVhbCBzY3JhcGluZzonLCBlcnJvcik7XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gY29tcGxldGUgc2NyYXBpbmcgcHJvY2VzcycsXG4gICAgICBtZXNzYWdlOiBTdHJpbmcoZXJyb3IpXG4gICAgfSBhcyBBcGlSZXNwb25zZTxudWxsPiwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgIGVycm9yOiAnTWV0aG9kIG5vdCBhbGxvd2VkLiBVc2UgUE9TVCB0byB0cmlnZ2VyIHNjcmFwaW5nLidcbiAgfSwgeyBzdGF0dXM6IDQwNSB9KTtcbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiVkxSU2NyYXBlciIsIlBPU1QiLCJjb25zb2xlIiwibG9nIiwic2NyYXBlciIsInJlc3VsdCIsInNjcmFwZUFsbE1hdGNoZXMiLCJqc29uIiwic3VjY2VzcyIsImRhdGEiLCJtZXNzYWdlIiwibWF0Y2hlc19zY3JhcGVkIiwibWF0Y2hlc191cGRhdGVkIiwiZXJyb3IiLCJTdHJpbmciLCJzdGF0dXMiLCJHRVQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/scrape/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/database.ts":
/*!*****************************!*\
  !*** ./src/lib/database.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseService: () => (/* binding */ DatabaseService),\n/* harmony export */   getDatabase: () => (/* binding */ getDatabase)\n/* harmony export */ });\n/* harmony import */ var better_sqlite3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-sqlite3 */ \"better-sqlite3\");\n/* harmony import */ var better_sqlite3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(better_sqlite3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Database instance\nlet db = null;\nfunction getDatabase() {\n    if (!db) {\n        const dbPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'vlr_matches.db');\n        db = new (better_sqlite3__WEBPACK_IMPORTED_MODULE_0___default())(dbPath);\n        // Enable WAL mode for better performance\n        db.pragma('journal_mode = WAL');\n        // Initialize database schema\n        initializeSchema();\n    }\n    return db;\n}\nfunction initializeSchema() {\n    const db = getDatabase();\n    // Create tables\n    db.exec(`\n    CREATE TABLE IF NOT EXISTS teams (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      name TEXT NOT NULL UNIQUE,\n      flag_url TEXT,\n      logo_url TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );\n\n    CREATE TABLE IF NOT EXISTS tournaments (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      name TEXT NOT NULL UNIQUE,\n      logo_url TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );\n\n    CREATE TABLE IF NOT EXISTS matches (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      vlr_match_id TEXT NOT NULL UNIQUE,\n      team1_id INTEGER,\n      team2_id INTEGER,\n      tournament_id INTEGER,\n      status TEXT NOT NULL DEFAULT 'upcoming',\n      match_time DATETIME,\n      match_format TEXT DEFAULT 'Bo3',\n      stage TEXT,\n      team1_score INTEGER DEFAULT 0,\n      team2_score INTEGER DEFAULT 0,\n      match_url TEXT,\n      vod_url TEXT,\n      stats_url TEXT,\n      maps_data TEXT, -- JSON string\n      player_stats TEXT, -- JSON string\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (team1_id) REFERENCES teams (id),\n      FOREIGN KEY (team2_id) REFERENCES teams (id),\n      FOREIGN KEY (tournament_id) REFERENCES tournaments (id)\n    );\n\n    CREATE TABLE IF NOT EXISTS scraping_logs (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      scrape_type TEXT NOT NULL,\n      url TEXT NOT NULL,\n      status TEXT NOT NULL,\n      error_message TEXT,\n      matches_found INTEGER DEFAULT 0,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    );\n\n    -- Indexes for performance\n    CREATE INDEX IF NOT EXISTS idx_matches_status ON matches(status);\n    CREATE INDEX IF NOT EXISTS idx_matches_vlr_id ON matches(vlr_match_id);\n    CREATE INDEX IF NOT EXISTS idx_matches_time ON matches(match_time);\n    CREATE INDEX IF NOT EXISTS idx_scraping_logs_created ON scraping_logs(created_at);\n  `);\n}\nclass DatabaseService {\n    constructor(){\n        this.db = getDatabase();\n    }\n    // Team operations\n    getOrCreateTeam(name, flagUrl, logoUrl) {\n        if (!name || name.toLowerCase() === 'tbd' || name === '–' || name === '-') {\n            throw new Error('Invalid team name');\n        }\n        // Try to find existing team\n        const existing = this.db.prepare('SELECT * FROM teams WHERE name = ?').get(name);\n        if (existing) {\n            return existing;\n        }\n        // Create new team\n        const result = this.db.prepare(`\n      INSERT INTO teams (name, flag_url, logo_url)\n      VALUES (?, ?, ?)\n    `).run(name, flagUrl, logoUrl);\n        return {\n            id: result.lastInsertRowid,\n            name,\n            flag_url: flagUrl,\n            logo_url: logoUrl,\n            created_at: new Date().toISOString()\n        };\n    }\n    // Tournament operations\n    getOrCreateTournament(name, logoUrl) {\n        if (!name) {\n            throw new Error('Invalid tournament name');\n        }\n        // Try to find existing tournament\n        const existing = this.db.prepare('SELECT * FROM tournaments WHERE name = ?').get(name);\n        if (existing) {\n            return existing;\n        }\n        // Create new tournament\n        const result = this.db.prepare(`\n      INSERT INTO tournaments (name, logo_url)\n      VALUES (?, ?)\n    `).run(name, logoUrl);\n        return {\n            id: result.lastInsertRowid,\n            name,\n            logo_url: logoUrl,\n            created_at: new Date().toISOString()\n        };\n    }\n    // Match operations\n    saveMatch(matchData) {\n        const transaction = this.db.transaction(()=>{\n            // Get or create teams and tournament\n            let team1;\n            let team2;\n            let tournament;\n            if (matchData.team1_name) {\n                team1 = this.getOrCreateTeam(matchData.team1_name);\n            }\n            if (matchData.team2_name) {\n                team2 = this.getOrCreateTeam(matchData.team2_name);\n            }\n            if (matchData.tournament_name) {\n                tournament = this.getOrCreateTournament(matchData.tournament_name);\n            }\n            // Check if match exists\n            const existing = this.db.prepare('SELECT * FROM matches WHERE vlr_match_id = ?').get(matchData.vlr_match_id);\n            const now = new Date().toISOString();\n            if (existing) {\n                // Update existing match\n                this.db.prepare(`\n          UPDATE matches SET\n            team1_id = ?,\n            team2_id = ?,\n            tournament_id = ?,\n            status = ?,\n            match_time = ?,\n            match_format = ?,\n            stage = ?,\n            team1_score = ?,\n            team2_score = ?,\n            match_url = ?,\n            vod_url = ?,\n            stats_url = ?,\n            maps_data = ?,\n            player_stats = ?,\n            updated_at = ?\n          WHERE vlr_match_id = ?\n        `).run(team1?.id, team2?.id, tournament?.id, matchData.status, matchData.match_time, matchData.match_format, matchData.stage, matchData.team1_score, matchData.team2_score, matchData.match_url, matchData.vod_url, matchData.stats_url, matchData.maps_data ? JSON.stringify(matchData.maps_data) : null, matchData.player_stats ? JSON.stringify(matchData.player_stats) : null, now, matchData.vlr_match_id);\n                return {\n                    ...existing,\n                    updated_at: now\n                };\n            } else {\n                // Create new match\n                const result = this.db.prepare(`\n          INSERT INTO matches (\n            vlr_match_id, team1_id, team2_id, tournament_id, status,\n            match_time, match_format, stage, team1_score, team2_score,\n            match_url, vod_url, stats_url, maps_data, player_stats\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        `).run(matchData.vlr_match_id, team1?.id, team2?.id, tournament?.id, matchData.status, matchData.match_time, matchData.match_format, matchData.stage, matchData.team1_score, matchData.team2_score, matchData.match_url, matchData.vod_url, matchData.stats_url, matchData.maps_data ? JSON.stringify(matchData.maps_data) : null, matchData.player_stats ? JSON.stringify(matchData.player_stats) : null);\n                return {\n                    id: result.lastInsertRowid,\n                    vlr_match_id: matchData.vlr_match_id,\n                    team1_id: team1?.id,\n                    team2_id: team2?.id,\n                    tournament_id: tournament?.id,\n                    status: matchData.status,\n                    match_time: matchData.match_time,\n                    match_format: matchData.match_format,\n                    stage: matchData.stage,\n                    team1_score: matchData.team1_score,\n                    team2_score: matchData.team2_score,\n                    match_url: matchData.match_url,\n                    vod_url: matchData.vod_url,\n                    stats_url: matchData.stats_url,\n                    maps_data: matchData.maps_data,\n                    player_stats: matchData.player_stats,\n                    created_at: now,\n                    updated_at: now\n                };\n            }\n        });\n        return transaction();\n    }\n    // Get matches with filtering\n    getMatches(status, limit = 50, offset = 0) {\n        let query = `\n      SELECT \n        m.*,\n        t1.name as team1_name, t1.flag_url as team1_flag,\n        t2.name as team2_name, t2.flag_url as team2_flag,\n        tour.name as tournament_name, tour.logo_url as tournament_logo\n      FROM matches m\n      LEFT JOIN teams t1 ON m.team1_id = t1.id\n      LEFT JOIN teams t2 ON m.team2_id = t2.id\n      LEFT JOIN tournaments tour ON m.tournament_id = tour.id\n    `;\n        const params = [];\n        if (status && status !== 'all') {\n            query += ' WHERE m.status = ?';\n            params.push(status);\n        }\n        // Get total count\n        let countQuery = 'SELECT COUNT(*) as count FROM matches m';\n        if (status && status !== 'all') {\n            countQuery += ' WHERE status = ?';\n        }\n        const totalResult = this.db.prepare(countQuery).get(status && status !== 'all' ? [\n            status\n        ] : []);\n        // Add ordering and pagination\n        query += ' ORDER BY m.created_at DESC LIMIT ? OFFSET ?';\n        params.push(limit, offset);\n        const rows = this.db.prepare(query).all(params);\n        const matches = rows.map((row)=>({\n                id: row.id,\n                vlr_match_id: row.vlr_match_id,\n                team1_id: row.team1_id,\n                team2_id: row.team2_id,\n                tournament_id: row.tournament_id,\n                status: row.status,\n                match_time: row.match_time,\n                match_format: row.match_format,\n                stage: row.stage,\n                team1_score: row.team1_score,\n                team2_score: row.team2_score,\n                match_url: row.match_url,\n                vod_url: row.vod_url,\n                stats_url: row.stats_url,\n                maps_data: row.maps_data ? JSON.parse(row.maps_data) : undefined,\n                player_stats: row.player_stats ? JSON.parse(row.player_stats) : undefined,\n                created_at: row.created_at,\n                updated_at: row.updated_at,\n                team1: row.team1_name ? {\n                    id: row.team1_id,\n                    name: row.team1_name,\n                    flag_url: row.team1_flag,\n                    created_at: ''\n                } : undefined,\n                team2: row.team2_name ? {\n                    id: row.team2_id,\n                    name: row.team2_name,\n                    flag_url: row.team2_flag,\n                    created_at: ''\n                } : undefined,\n                tournament: row.tournament_name ? {\n                    id: row.tournament_id,\n                    name: row.tournament_name,\n                    logo_url: row.tournament_logo,\n                    created_at: ''\n                } : undefined\n            }));\n        return {\n            matches,\n            total: totalResult.count\n        };\n    }\n    // Get single match by ID\n    getMatch(id) {\n        const row = this.db.prepare(`\n      SELECT \n        m.*,\n        t1.name as team1_name, t1.flag_url as team1_flag,\n        t2.name as team2_name, t2.flag_url as team2_flag,\n        tour.name as tournament_name, tour.logo_url as tournament_logo\n      FROM matches m\n      LEFT JOIN teams t1 ON m.team1_id = t1.id\n      LEFT JOIN teams t2 ON m.team2_id = t2.id\n      LEFT JOIN tournaments tour ON m.tournament_id = tour.id\n      WHERE m.id = ?\n    `).get(id);\n        if (!row) return null;\n        return {\n            id: row.id,\n            vlr_match_id: row.vlr_match_id,\n            team1_id: row.team1_id,\n            team2_id: row.team2_id,\n            tournament_id: row.tournament_id,\n            status: row.status,\n            match_time: row.match_time,\n            match_format: row.match_format,\n            stage: row.stage,\n            team1_score: row.team1_score,\n            team2_score: row.team2_score,\n            match_url: row.match_url,\n            vod_url: row.vod_url,\n            stats_url: row.stats_url,\n            maps_data: row.maps_data ? JSON.parse(row.maps_data) : undefined,\n            player_stats: row.player_stats ? JSON.parse(row.player_stats) : undefined,\n            created_at: row.created_at,\n            updated_at: row.updated_at,\n            team1: row.team1_name ? {\n                id: row.team1_id,\n                name: row.team1_name,\n                flag_url: row.team1_flag,\n                created_at: ''\n            } : undefined,\n            team2: row.team2_name ? {\n                id: row.team2_id,\n                name: row.team2_name,\n                flag_url: row.team2_flag,\n                created_at: ''\n            } : undefined,\n            tournament: row.tournament_name ? {\n                id: row.tournament_id,\n                name: row.tournament_name,\n                logo_url: row.tournament_logo,\n                created_at: ''\n            } : undefined\n        };\n    }\n    // Get all teams\n    getTeams() {\n        return this.db.prepare('SELECT * FROM teams ORDER BY name').all();\n    }\n    // Get all tournaments\n    getTournaments() {\n        return this.db.prepare('SELECT * FROM tournaments ORDER BY name').all();\n    }\n    // Log scraping activity\n    logScraping(type, url, status, errorMessage, matchesFound = 0) {\n        this.db.prepare(`\n      INSERT INTO scraping_logs (scrape_type, url, status, error_message, matches_found)\n      VALUES (?, ?, ?, ?, ?)\n    `).run(type, url, status, errorMessage, matchesFound);\n    }\n    // Get scraping logs\n    getScrapingLogs(limit = 20) {\n        return this.db.prepare(`\n      SELECT * FROM scraping_logs \n      ORDER BY created_at DESC \n      LIMIT ?\n    `).all(limit);\n    }\n    // Get database statistics\n    getStats() {\n        const matchCount = this.db.prepare('SELECT COUNT(*) as count FROM matches').get();\n        const liveCount = this.db.prepare('SELECT COUNT(*) as count FROM matches WHERE status = \"live\"').get();\n        const upcomingCount = this.db.prepare('SELECT COUNT(*) as count FROM matches WHERE status = \"upcoming\"').get();\n        const completedCount = this.db.prepare('SELECT COUNT(*) as count FROM matches WHERE status = \"completed\"').get();\n        const teamCount = this.db.prepare('SELECT COUNT(*) as count FROM teams').get();\n        const tournamentCount = this.db.prepare('SELECT COUNT(*) as count FROM tournaments').get();\n        return {\n            total_matches: matchCount.count,\n            live_matches: liveCount.count,\n            upcoming_matches: upcomingCount.count,\n            completed_matches: completedCount.count,\n            total_teams: teamCount.count,\n            total_tournaments: tournamentCount.count\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/database.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/scraper.ts":
/*!****************************!*\
  !*** ./src/lib/scraper.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VLRScraper: () => (/* binding */ VLRScraper)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var cheerio__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/dist/esm/index.js\");\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./database */ \"(rsc)/./src/lib/database.ts\");\n\n\n\nclass VLRScraper {\n    constructor(){\n        this.baseUrl = 'https://www.vlr.gg';\n        this.rateLimitMs = 1000 // 1 second between requests\n        ;\n        this.db = new _database__WEBPACK_IMPORTED_MODULE_1__.DatabaseService();\n    }\n    async delay(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    async makeRequest(url) {\n        try {\n            await this.delay(this.rateLimitMs);\n            const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(url, {\n                headers: {\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n                    'Accept-Language': 'en-US,en;q=0.5',\n                    'Accept-Encoding': 'gzip, deflate',\n                    'Connection': 'keep-alive'\n                },\n                timeout: 10000\n            });\n            return cheerio__WEBPACK_IMPORTED_MODULE_0__.load(response.data);\n        } catch (error) {\n            console.error(`Failed to fetch ${url}:`, error);\n            return null;\n        }\n    }\n    parseTimeString(timeStr) {\n        if (!timeStr) return undefined;\n        const cleanTime = timeStr.trim().toLowerCase();\n        // Handle \"live\" status\n        if (cleanTime.includes('live')) {\n            return new Date().toISOString();\n        }\n        // Handle relative time formats (e.g., \"2h 30m\", \"48m\", \"1d 2h\")\n        try {\n            const now = new Date();\n            let totalMinutes = 0;\n            // Parse days\n            const dayMatch = cleanTime.match(/(\\d+)d/);\n            if (dayMatch) {\n                totalMinutes += parseInt(dayMatch[1]) * 24 * 60;\n            }\n            // Parse hours\n            const hourMatch = cleanTime.match(/(\\d+)h/);\n            if (hourMatch) {\n                totalMinutes += parseInt(hourMatch[1]) * 60;\n            }\n            // Parse minutes\n            const minuteMatch = cleanTime.match(/(\\d+)m/);\n            if (minuteMatch) {\n                totalMinutes += parseInt(minuteMatch[1]);\n            }\n            if (totalMinutes > 0) {\n                const futureTime = new Date(now.getTime() + totalMinutes * 60 * 1000);\n                return futureTime.toISOString();\n            }\n        } catch (error) {\n            console.error('Error parsing time string:', error);\n        }\n        return undefined;\n    }\n    extractMatchIdFromUrl(url) {\n        const match = url.match(/\\/(\\d+)\\//);\n        return match ? match[1] : null;\n    }\n    async scrapeMatchesList(matchesType = '') {\n        const url = `${this.baseUrl}/matches/${matchesType}`;\n        console.log(`Scraping matches from: ${url}`);\n        const $ = await this.makeRequest(url);\n        if (!$) {\n            throw new Error(`Failed to fetch matches page: ${url}`);\n        }\n        const matches = [];\n        // Find match containers - VLR.gg uses different selectors\n        const matchContainers = $('a.wf-module-item, a.match-item').toArray();\n        for (const container of matchContainers){\n            try {\n                const matchData = this.parseMatchContainer($, container);\n                if (matchData) {\n                    matches.push(matchData);\n                }\n            } catch (error) {\n                console.error('Error parsing match container:', error);\n            }\n        }\n        console.log(`Found ${matches.length} matches from ${url}`);\n        return matches;\n    }\n    parseMatchContainer($, container) {\n        try {\n            const $container = $(container);\n            // Extract match URL and ID\n            const matchUrl = $container.attr('href');\n            if (!matchUrl) return null;\n            const fullMatchUrl = matchUrl.startsWith('http') ? matchUrl : `${this.baseUrl}${matchUrl}`;\n            const vlrMatchId = this.extractMatchIdFromUrl(fullMatchUrl);\n            if (!vlrMatchId) return null;\n            // Extract team names\n            const teamElements = $container.find('.match-item-vs-team-name, .team-name, .text-of').toArray();\n            let team1Name = '';\n            let team2Name = '';\n            if (teamElements.length >= 2) {\n                team1Name = $(teamElements[0]).text().trim();\n                team2Name = $(teamElements[1]).text().trim();\n            } else {\n                // Alternative selectors for team names\n                const allTeamText = $container.find('[class*=\"team\"], [class*=\"vs\"]').map((i, el)=>$(el).text().trim()).get();\n                const validTeams = allTeamText.filter((text)=>text && text !== 'vs' && text !== '–' && text !== '-');\n                if (validTeams.length >= 2) {\n                    team1Name = validTeams[0];\n                    team2Name = validTeams[1];\n                }\n            }\n            // Extract scores\n            const scoreElements = $container.find('.match-item-vs-team-score, .score, [class*=\"score\"]').toArray();\n            let team1Score = 0;\n            let team2Score = 0;\n            if (scoreElements.length >= 2) {\n                const score1Text = $(scoreElements[0]).text().trim();\n                const score2Text = $(scoreElements[1]).text().trim();\n                team1Score = score1Text && !isNaN(parseInt(score1Text)) ? parseInt(score1Text) : 0;\n                team2Score = score2Text && !isNaN(parseInt(score2Text)) ? parseInt(score2Text) : 0;\n            }\n            // Determine status\n            let status = 'upcoming';\n            const statusText = $container.find('.match-item-time, .time, [class*=\"time\"], [class*=\"live\"]').text().toLowerCase();\n            if (statusText.includes('live')) {\n                status = 'live';\n            } else if (team1Score > 0 || team2Score > 0) {\n                status = 'completed';\n            }\n            // Extract tournament info\n            const tournamentElement = $container.find('.match-item-event, .event, [class*=\"event\"], .tournament').first();\n            const tournamentName = tournamentElement.text().trim() || 'Unknown Tournament';\n            // Extract stage/series info\n            const stageElement = $container.find('.match-item-event-series, .series, [class*=\"series\"]').first();\n            const stage = stageElement.text().trim();\n            // Extract time\n            const timeElement = $container.find('.match-item-time, .time').first();\n            const timeText = timeElement.text().trim();\n            const matchTime = this.parseTimeString(timeText);\n            // Determine match format (default to Bo3)\n            let matchFormat = 'Bo3';\n            const formatText = $container.text().toLowerCase();\n            if (formatText.includes('bo1')) {\n                matchFormat = 'Bo1';\n            } else if (formatText.includes('bo5')) {\n                matchFormat = 'Bo5';\n            }\n            return {\n                vlr_match_id: vlrMatchId,\n                team1_name: team1Name || undefined,\n                team2_name: team2Name || undefined,\n                team1_score: team1Score,\n                team2_score: team2Score,\n                tournament_name: tournamentName,\n                status,\n                match_time: matchTime,\n                match_format: matchFormat,\n                stage: stage || undefined,\n                match_url: fullMatchUrl\n            };\n        } catch (error) {\n            console.error('Error parsing match container:', error);\n            return null;\n        }\n    }\n    async scrapeMatchDetails(vlrMatchId) {\n        // First, get the match from database to get its URL\n        const matches = this.db.getMatches('all', 1000, 0);\n        const existingMatch = matches.matches.find((m)=>m.vlr_match_id === vlrMatchId);\n        if (!existingMatch?.match_url) {\n            console.error(`No match URL found for VLR match ID: ${vlrMatchId}`);\n            return null;\n        }\n        console.log(`Scraping detailed match data from: ${existingMatch.match_url}`);\n        const $ = await this.makeRequest(existingMatch.match_url);\n        if (!$) {\n            console.error(`Failed to fetch match details page: ${existingMatch.match_url}`);\n            return null;\n        }\n        try {\n            // Extract detailed match information\n            const mapsData = [];\n            const playerStats = [];\n            // Parse map results\n            const mapContainers = $('.vm-stats-game, .map-result, [class*=\"map\"]').toArray();\n            for (const mapContainer of mapContainers){\n                const mapData = this.parseMapData($, mapContainer);\n                if (mapData) {\n                    mapsData.push(mapData);\n                }\n            }\n            // Parse player statistics\n            const playerRows = $('.vm-stats-game-player, .player-stats-row, [class*=\"player\"]').toArray();\n            for (const playerRow of playerRows){\n                const playerData = this.parsePlayerStats($, playerRow);\n                if (playerData) {\n                    playerStats.push(playerData);\n                }\n            }\n            // Extract VOD and stats URLs\n            const vodUrl = $('a[href*=\"youtube\"], a[href*=\"twitch\"], .vod-link').attr('href');\n            const statsUrl = $('a[href*=\"stats\"], .stats-link').attr('href');\n            return {\n                vlr_match_id: vlrMatchId,\n                team1_name: existingMatch.team1?.name,\n                team2_name: existingMatch.team2?.name,\n                team1_score: existingMatch.team1_score,\n                team2_score: existingMatch.team2_score,\n                tournament_name: existingMatch.tournament?.name,\n                status: existingMatch.status,\n                match_time: existingMatch.match_time,\n                match_format: existingMatch.match_format,\n                stage: existingMatch.stage,\n                match_url: existingMatch.match_url,\n                maps_data: mapsData.length > 0 ? mapsData : undefined,\n                player_stats: playerStats.length > 0 ? playerStats : undefined,\n                vod_url: vodUrl ? vodUrl.startsWith('http') ? vodUrl : `${this.baseUrl}${vodUrl}` : undefined,\n                stats_url: statsUrl ? statsUrl.startsWith('http') ? statsUrl : `${this.baseUrl}${statsUrl}` : undefined\n            };\n        } catch (error) {\n            console.error(`Error scraping match details for ${vlrMatchId}:`, error);\n            return null;\n        }\n    }\n    parseMapData($, mapContainer) {\n        try {\n            const $map = $(mapContainer);\n            // Extract map name\n            const mapNameElement = $map.find('.map-name, .vm-stats-game-header-map, [class*=\"map\"]').first();\n            let mapName = mapNameElement.text().trim();\n            // Clean up map name - remove whitespace, tabs, newlines, and extra text\n            if (mapName) {\n                // Remove all whitespace, tabs, and newlines\n                mapName = mapName.replace(/[\\t\\n\\r\\s]+/g, ' ').trim();\n                // Remove common VLR.gg artifacts like \"PICK\", \"BAN\", timestamps, etc.\n                mapName = mapName.replace(/\\b(PICK|BAN|DECIDER)\\b/gi, '').trim();\n                // Remove timestamps (patterns like \"16:30\", \"47:21\", etc.)\n                mapName = mapName.replace(/\\b\\d{1,2}:\\d{2}\\b/g, '').trim();\n                // Extract just the map name (first word should be the actual map)\n                const mapWords = mapName.split(/\\s+/);\n                const validMaps = [\n                    'Bind',\n                    'Haven',\n                    'Split',\n                    'Ascent',\n                    'Dust2',\n                    'Inferno',\n                    'Mirage',\n                    'Cache',\n                    'Overpass',\n                    'Vertigo',\n                    'Nuke',\n                    'Train',\n                    'Cobblestone',\n                    'Icebox',\n                    'Breeze',\n                    'Fracture',\n                    'Pearl',\n                    'Lotus',\n                    'Sunset',\n                    'Abyss'\n                ];\n                // Find the first valid map name in the text\n                for (const word of mapWords){\n                    const cleanWord = word.replace(/[^\\w]/g, '');\n                    const foundMap = validMaps.find((map)=>map.toLowerCase() === cleanWord.toLowerCase());\n                    if (foundMap) {\n                        mapName = foundMap;\n                        break;\n                    }\n                }\n                // If no valid map found but we have text, take the first meaningful word\n                if (!validMaps.some((map)=>map.toLowerCase() === mapName.toLowerCase()) && mapWords.length > 0) {\n                    mapName = mapWords[0].replace(/[^\\w]/g, '');\n                }\n            }\n            // Extract map scores\n            const scoreElements = $map.find('.score, .vm-stats-game-header-score, [class*=\"score\"]').toArray();\n            let team1Score = 0;\n            let team2Score = 0;\n            if (scoreElements.length >= 2) {\n                const score1 = $(scoreElements[0]).text().trim();\n                const score2 = $(scoreElements[1]).text().trim();\n                team1Score = !isNaN(parseInt(score1)) ? parseInt(score1) : 0;\n                team2Score = !isNaN(parseInt(score2)) ? parseInt(score2) : 0;\n            }\n            // Extract agent picks\n            const agents = [];\n            const agentElements = $map.find('img[src*=\"agent\"], .agent-icon, [class*=\"agent\"]').toArray();\n            for (const agentEl of agentElements){\n                const agentSrc = $(agentEl).attr('src') || '';\n                if (agentSrc) {\n                    // Extract agent name from image path\n                    const agentName = agentSrc.split('/').pop()?.split('.')[0] || '';\n                    if (agentName) {\n                        agents.push(agentName);\n                    }\n                }\n            }\n            if (!mapName && team1Score === 0 && team2Score === 0 && agents.length === 0) {\n                return null;\n            }\n            return {\n                map_name: mapName || 'Unknown Map',\n                team1_score: team1Score,\n                team2_score: team2Score,\n                agents\n            };\n        } catch (error) {\n            console.error('Error parsing map data:', error);\n            return null;\n        }\n    }\n    parsePlayerStats($, playerRow) {\n        try {\n            const $row = $(playerRow);\n            // Extract player name\n            const nameElement = $row.find('.player-name, .vm-stats-game-player-name, [class*=\"name\"]').first();\n            const playerName = nameElement.text().trim();\n            if (!playerName) return null;\n            // Extract agent\n            const agentElement = $row.find('img[src*=\"agent\"], .agent').first();\n            const agentSrc = agentElement.attr('src') || '';\n            const agent = agentSrc ? agentSrc.split('/').pop()?.split('.')[0] || '' : '';\n            // Extract stats (kills, deaths, assists, etc.)\n            const statElements = $row.find('.stat, .vm-stats-game-player-stat, [class*=\"stat\"]').toArray();\n            // Default stats\n            let kills = 0;\n            let deaths = 0;\n            let assists = 0;\n            let acs = 0;\n            let kd = 0;\n            let adr = 0;\n            let hsPercent = 0;\n            let fk = 0;\n            let fd = 0;\n            // Try to extract stats from various selectors\n            const statsText = $row.text();\n            const statNumbers = statsText.match(/\\d+/g) || [];\n            if (statNumbers.length >= 3) {\n                kills = parseInt(statNumbers[0]) || 0;\n                deaths = parseInt(statNumbers[1]) || 0;\n                assists = parseInt(statNumbers[2]) || 0;\n                if (statNumbers.length >= 4) acs = parseInt(statNumbers[3]) || 0;\n                if (statNumbers.length >= 6) adr = parseInt(statNumbers[5]) || 0;\n            }\n            // Calculate K/D ratio\n            kd = deaths > 0 ? kills / deaths : kills;\n            return {\n                player_name: playerName,\n                team: 'team1',\n                agent,\n                kills,\n                deaths,\n                assists,\n                acs,\n                k_d_ratio: Math.round(kd * 100) / 100,\n                adr,\n                headshot_percentage: hsPercent,\n                first_kills: fk,\n                first_deaths: fd,\n                maps_played: 1\n            };\n        } catch (error) {\n            console.error('Error parsing player stats:', error);\n            return null;\n        }\n    }\n    async scrapeAllMatches() {\n        const startTime = Date.now();\n        const errors = [];\n        let matchesScraped = 0;\n        let matchesUpdated = 0;\n        let newTeams = 0;\n        let newTournaments = 0;\n        try {\n            // Log start of scraping\n            this.db.logScraping('full_scrape', `${this.baseUrl}/matches`, 'in_progress');\n            // Scrape upcoming matches\n            try {\n                const upcomingMatches = await this.scrapeMatchesList('');\n                for (const matchData of upcomingMatches){\n                    try {\n                        const existingMatch = this.db.getMatches('all', 1000, 0).matches.find((m)=>m.vlr_match_id === matchData.vlr_match_id);\n                        this.db.saveMatch(matchData);\n                        if (existingMatch) {\n                            matchesUpdated++;\n                        } else {\n                            matchesScraped++;\n                        }\n                    } catch (error) {\n                        errors.push(`Error saving upcoming match ${matchData.vlr_match_id}: ${error}`);\n                    }\n                }\n            } catch (error) {\n                errors.push(`Error scraping upcoming matches: ${error}`);\n            }\n            // Scrape completed matches\n            try {\n                const completedMatches = await this.scrapeMatchesList('results');\n                for (const matchData of completedMatches){\n                    try {\n                        const existingMatch = this.db.getMatches('all', 1000, 0).matches.find((m)=>m.vlr_match_id === matchData.vlr_match_id);\n                        this.db.saveMatch(matchData);\n                        if (existingMatch) {\n                            matchesUpdated++;\n                        } else {\n                            matchesScraped++;\n                        }\n                    } catch (error) {\n                        errors.push(`Error saving completed match ${matchData.vlr_match_id}: ${error}`);\n                    }\n                }\n            } catch (error) {\n                errors.push(`Error scraping completed matches: ${error}`);\n            }\n            // Get updated stats\n            const stats = this.db.getStats();\n            newTeams = stats.total_teams;\n            newTournaments = stats.total_tournaments;\n            // Log successful completion\n            this.db.logScraping('full_scrape', `${this.baseUrl}/matches`, 'success', undefined, matchesScraped + matchesUpdated);\n            const duration = Date.now() - startTime;\n            return {\n                success: true,\n                matches_scraped: matchesScraped,\n                matches_updated: matchesUpdated,\n                new_teams: newTeams,\n                new_tournaments: newTournaments,\n                errors,\n                duration_ms: duration\n            };\n        } catch (error) {\n            // Log error\n            this.db.logScraping('full_scrape', `${this.baseUrl}/matches`, 'error', String(error));\n            const duration = Date.now() - startTime;\n            return {\n                success: false,\n                matches_scraped: matchesScraped,\n                matches_updated: matchesUpdated,\n                new_teams: newTeams,\n                new_tournaments: newTournaments,\n                errors: [\n                    ...errors,\n                    `Critical error: ${error}`\n                ],\n                duration_ms: duration\n            };\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/scraper.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "?4c03":
/*!***********************!*\
  !*** debug (ignored) ***!
  \***********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "better-sqlite3":
/*!*********************************!*\
  !*** external "better-sqlite3" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("better-sqlite3");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "node:assert":
/*!******************************!*\
  !*** external "node:assert" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:assert");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "node:console":
/*!*******************************!*\
  !*** external "node:console" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:console");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:diagnostics_channel":
/*!*******************************************!*\
  !*** external "node:diagnostics_channel" ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:diagnostics_channel");

/***/ }),

/***/ "node:dns":
/*!***************************!*\
  !*** external "node:dns" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:dns");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:http");

/***/ }),

/***/ "node:http2":
/*!*****************************!*\
  !*** external "node:http2" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:http2");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:net");

/***/ }),

/***/ "node:perf_hooks":
/*!**********************************!*\
  !*** external "node:perf_hooks" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:perf_hooks");

/***/ }),

/***/ "node:querystring":
/*!***********************************!*\
  !*** external "node:querystring" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:querystring");

/***/ }),

/***/ "node:sqlite":
/*!******************************!*\
  !*** external "node:sqlite" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:sqlite");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:tls":
/*!***************************!*\
  !*** external "node:tls" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:tls");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "node:util/types":
/*!**********************************!*\
  !*** external "node:util/types" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util/types");

/***/ }),

/***/ "node:worker_threads":
/*!**************************************!*\
  !*** external "node:worker_threads" ***!
  \**************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:worker_threads");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:zlib");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/undici","vendor-chunks/parse5","vendor-chunks/iconv-lite","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/htmlparser2","vendor-chunks/entities","vendor-chunks/cheerio","vendor-chunks/css-select","vendor-chunks/encoding-sniffer","vendor-chunks/domutils","vendor-chunks/follow-redirects","vendor-chunks/css-what","vendor-chunks/form-data","vendor-chunks/get-intrinsic","vendor-chunks/domhandler","vendor-chunks/cheerio-select","vendor-chunks/whatwg-mimetype","vendor-chunks/asynckit","vendor-chunks/whatwg-encoding","vendor-chunks/dom-serializer","vendor-chunks/nth-check","vendor-chunks/parse5-htmlparser2-tree-adapter","vendor-chunks/combined-stream","vendor-chunks/mime-types","vendor-chunks/proxy-from-env","vendor-chunks/parse5-parser-stream","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/safer-buffer","vendor-chunks/domelementtype","vendor-chunks/es-set-tostringtag","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/boolbase","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fscrape%2Froute&page=%2Fapi%2Fscrape%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fscrape%2Froute.ts&appDir=%2Fhome%2Frunner%2Fworkspace%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frunner%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();